---
interface Props {
	pagoPorPropietario: {
		idDueno: string;
		nombreDueno: string;
		montoTotal: number;
		montoTarifaAgua: number;
		fechaPago: string;
		retiroCoche: boolean;
		estadoPago: boolean;
		guardaCarreta: boolean;
	}[];
	paginaActual?: number;
	totalPaginas?: number;
	registrosPorPagina?: number;
	totalRegistros?: number;
}

const opciones: Intl.DateTimeFormatOptions = {
	weekday: "long",
	day: "2-digit",
	month: "long",
	year: "numeric",
};

function convertirFechaPeru(fechaStr: string): string {
	const fechaUTC = new Date(fechaStr + "T00:00:00Z");
	const fechaLocal = new Date(fechaUTC.getTime() + 5 * 60 * 60 * 1000);
	return fechaLocal.toLocaleDateString("es-PE", opciones);
}

const {
	pagoPorPropietario,
	paginaActual = 1,
	totalPaginas = 1,
	registrosPorPagina = 10,
	totalRegistros = 0,
} = Astro.props;

// Calcular los números de página para mostrar
function calcularPaginasVisibles(
	actual: number,
	total: number,
	maxVisibles: number = 5,
): number[] {
	const paginas: number[] = [];
	const cantidadVisible = Math.min(maxVisibles, total);

	if (total <= maxVisibles) {
		for (let i = 1; i <= total; i++) {
			paginas.push(i);
		}
	} else if (actual <= 3) {
		for (let i = 1; i <= cantidadVisible; i++) {
			paginas.push(i);
		}
	} else if (actual >= total - 2) {
		for (let i = total - cantidadVisible + 1; i <= total; i++) {
			paginas.push(i);
		}
	} else {
		for (let i = actual - 2; i <= actual + 2; i++) {
			paginas.push(i);
		}
	}

	return paginas;
}

const paginasVisibles = calcularPaginasVisibles(paginaActual, totalPaginas);

// Calcular rango de registros mostrados
const inicioRango =
	registrosPorPagina === -1 ? 1 : (paginaActual - 1) * registrosPorPagina + 1;
const finRango =
	registrosPorPagina === -1
		? totalRegistros
		: Math.min(paginaActual * registrosPorPagina, totalRegistros);
---

<section class="overflow-x-auto">
	<div class="inline-block min-w-full align-middle">
		<!-- Agregar un contenedor específico para la tabla -->
		<div id="table-container" class="overflow-hidden shadow-md rounded-2xl">
			<table
				id="payments-table"
				class:list={[
					"min-w-full overflow-x-auto",
					"divide-y rounded-lg",
					"bg-white dark:bg-slate-800",
					"divide-gray-300 dark:divide-slate-700",
				]}
			>
				<thead class="bg-slate-200 dark:bg-slate-700 rounded-t-lg text-nowrap">
					<tr>
						<th
							scope="col"
							class="p-4 text-xs sm:text-sm xl:text-base font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>
							Fecha de pago
						</th>
						<th
							scope="col"
							class="p-4 text-xs sm:text-sm xl:text-base font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>
							Pago realizado
						</th>
						<th
							scope="col"
							class="p-4 text-xs sm:text-sm xl:text-base font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>
							¿retiro su carreta?
						</th>
						<th
							scope="col"
							class="p-4 text-xs sm:text-sm xl:text-base font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>
							Estado del Pago
						</th>
						<th
							scope="col"
							class="p-4 text-xs sm:text-sm xl:text-base font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>
							Acciones
						</th>
					</tr>
				</thead>

				<tbody class="divide-y divide-gray-200 dark:divide-gray-700">
					{
						pagoPorPropietario.map((pago) => {
							const formatoPago = {
								idDueno: pago.idDueno ?? "-",
								nombreDueno: pago.nombreDueno ?? "-",
								fechaPago: pago.fechaPago ?? "-",
								montoTotal: pago.montoTotal ?? 0,
								retiroCoche: pago.retiroCoche ? "Sí vino" : "No vino",
								estadoPago: pago.estadoPago ? "Sí Canceló" : "No Pagó",
								guardaCarreta: pago.guardaCarreta
									? "Sí guarda"
									: "Ya no guarda",
							};

							return (
								<tr class="hover:bg-gray-100 dark:hover:bg-gray-700 transition duration-200">
									<td
										id="table-monto-diario"
										class="p-4 text-xs sm:text-sm xl:text-base font-semibold text-gray-900 whitespace-nowrap dark:text-gray-200"
									>
										{convertirFechaPeru(formatoPago.fechaPago)}
									</td>
									<td
										id="table-monto-diario"
										class="p-4 text-xs sm:text-sm xl:text-base font-semibold text-gray-900 whitespace-nowrap dark:text-gray-200"
									>
										S/. {formatoPago.montoTotal.toFixed(2)}
									</td>
									<td class="p-4 text-xs sm:text-sm xl:text-base text-nowrap font-medium">
										<span
											id="table-retiro-coche-value"
											class:list={[
												"px-3 py-1 rounded-full text-sm sm:text-base",
												formatoPago.retiroCoche === "No vino"
													? "text-neutral-800 bg-neutral-300 dark:text-[#cacaca] dark:bg-[#32373f]"
													: "text-blue-800 bg-blue-300 dark:text-[#5294ff] dark:bg-[#162542]",
											]}
										>
											{formatoPago.retiroCoche}
										</span>
									</td>
									<td class="p-4 text-xs sm:text-sm xl:text-base text-nowrap font-medium">
										<span
											id="table-estado-pago-value"
											class:list={[
												"px-3 py-1 rounded-full text-sm sm:text-base",
												formatoPago.estadoPago === "Sí Canceló"
													? "text-green-800 bg-green-300 dark:text-[#58ff36] dark:bg-[#2fff403d]"
													: "text-red-900 bg-red-200 dark:text-[#ff3636] dark:bg-[#ff2f2f3d]",
											]}
										>
											{formatoPago.estadoPago}
										</span>
									</td>
									<td class="p-4 space-x-2 whitespace-nowrap">
										<button
											type="button"
											id="open-edit-owner-daily-pay-modal"
											data-modal-toggle="edit-owner-daily-pay-modal"
											onclick={`sessionStorage.setItem('ownerDailyPaymentData', JSON.stringify({
                                                    id: '${formatoPago.idDueno}',
                                                    nombrePropietario: '${formatoPago.nombreDueno}',
                                                    montoDiario: '${formatoPago.montoTotal.toFixed(2)}',
                                                    guardaCarreta: '${formatoPago.guardaCarreta}',
                                            }));`}
											class="inline-flex items-center px-3 py-2 text-xs sm:text-sm xl:text-base font-medium text-center text-white rounded-lg bg-blue-600 hover:bg-blue-700 focus:ring-2 focus:ring-blue-400 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-700"
										>
											<svg
												class="w-4 h-4 mr-2"
												fill="currentColor"
												viewBox="0 0 20 20"
												xmlns="http://www.w3.org/2000/svg"
											>
												<path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
												<path
													fill-rule="evenodd"
													d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"
													clip-rule="evenodd"
												/>
											</svg>
											Editar
										</button>
									</td>
								</tr>
							);
						})
					}
				</tbody>
			</table>

			<!-- Controles de paginación con ID específico -->
			<div id="pagination-controls">
				{
					totalPaginas > 1 && registrosPorPagina !== -1 && (
						<div class="px-5 py-4 bg-white dark:bg-slate-800 border-t border-gray-200 dark:border-gray-700">
							<div class="flex flex-col sm:flex-row justify-between items-center">
								<div class="mb-4 sm:mb-0 text-sm text-gray-700 dark:text-gray-300">
									Mostrando {inicioRango} a {finRango} de {totalRegistros}{" "}
									registros
								</div>
								<div class="flex space-x-2">
									<button
										data-page={Math.max(1, paginaActual - 1)}
										class:list={[
											"pagination-btn px-4 py-2 text-sm font-medium rounded-md",
											"focus:outline-none focus:ring-2 focus:ring-blue-500",
											paginaActual === 1
												? "bg-gray-100 text-gray-400 cursor-not-allowed dark:bg-gray-700 dark:text-gray-500"
												: "bg-white text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700",
										]}
										disabled={paginaActual === 1}
									>
										Anterior
									</button>

									{paginasVisibles.map((pageNum) => (
										<button
											data-page={pageNum}
											class:list={[
												"pagination-btn px-4 py-2 text-sm font-medium rounded-md",
												"focus:outline-none focus:ring-2 focus:ring-blue-500",
												pageNum === paginaActual
													? "bg-blue-600 text-white dark:bg-blue-500"
													: "bg-white text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700",
											]}
										>
											{pageNum}
										</button>
									))}

									<button
										data-page={Math.min(totalPaginas, paginaActual + 1)}
										class:list={[
											"pagination-btn px-4 py-2 text-sm font-medium rounded-md",
											"focus:outline-none focus:ring-2 focus:ring-blue-500",
											paginaActual === totalPaginas
												? "bg-gray-100 text-gray-400 cursor-not-allowed dark:bg-gray-700 dark:text-gray-500"
												: "bg-white text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700",
										]}
										disabled={paginaActual === totalPaginas}
									>
										Siguiente
									</button>
								</div>
							</div>
						</div>
					)
				}
			</div>
		</div>
	</div>

	<!-- Indicador de carga -->
	<div
		id="loading-indicator"
		class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center z-50 hidden"
	>
		<div
			class="bg-white dark:bg-gray-800 rounded-lg p-6 flex items-center space-x-3"
		>
			<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600">
			</div>
			<span class="text-gray-700 dark:text-gray-300">Cargando...</span>
		</div>
	</div>

	<!-- Modal existente sin cambios -->
	<!-- ... resto del código del modal ... -->
</section>

<script>
	// Input monto_diario
	const editMontoDiarioElement = document.getElementById("edit-monto-diario");
	if (editMontoDiarioElement) {
		editMontoDiarioElement.addEventListener("input", (event) => {
			const input: any = event.target;
			const regex = /^\d{0,2}(\.\d{0,2})?$/; // Permite hasta 2 cifras enteras y 2 decimales
			const previousValue = input.getAttribute("data-previous-value") || ""; // Obtiene el valor anterior

			if (!regex.test(input.value)) {
				input.value = previousValue; // Restaura el valor anterior si no es válido
			} else {
				input.setAttribute("data-previous-value", input.value); // Guarda el valor actual como válido
			}
		});
	}

	// Espera a que cargue toda la pagina para ejecutarse
	document.addEventListener("DOMContentLoaded", () => {
		// Función para mostrar una notificación temporal
		function mostrarNotificacion(mensaje: any, tipo: any) {
			// Crear un elemento de notificación
			const notificacion = document.createElement("div");

			// Establecer clases según el tipo
			const baseClasses =
				"fixed bottom-4 right-4 py-2 px-4 rounded-lg shadow-lg z-50 transition-all duration-300 transform opacity-0 scale-95";
			const typeClasses =
				tipo === "success"
					? "bg-green-600 text-white"
					: tipo === "error"
						? "bg-red-500 text-white"
						: "bg-orange-700 text-white";

			const setTimeoutValue = tipo === "success" ? 800 : 5000;

			notificacion.className = `${baseClasses} ${typeClasses}`;
			notificacion.textContent = mensaje;

			// Añadir al DOM
			document.body.appendChild(notificacion);

			// Animación para aparecer
			setTimeout(() => {
				notificacion.classList.add("opacity-100", "scale-100");
				notificacion.classList.remove("opacity-0", "scale-95");
			}, 10);

			// Eliminar después del tiempo configurado
			setTimeout(() => {
				notificacion.classList.add("translate-y-10", "opacity-0");
				notificacion.classList.remove("opacity-100", "scale-100");
				setTimeout(() => {
					document.body.removeChild(notificacion);
				}, 200);
			}, setTimeoutValue);
		}

		// Función para alternar el estado del modal
		function toggleModalVisibility(modalId: string, show: boolean) {
			const modal = document.getElementById(modalId);
			if (modal) {
				const modalContent = modal.querySelector(".transform");
				if (show) {
					modal.classList.remove("hidden");
					modal.classList.add("flex");
					setTimeout(() => {
						modal.classList.add("opacity-100");
						modalContent?.classList.add("scale-100", "opacity-100");
						modalContent?.classList.remove("scale-95", "opacity-0");
					}, 10);
				} else {
					modal.classList.remove("opacity-100");
					modalContent?.classList.remove("scale-100", "opacity-100");
					modalContent?.classList.add("scale-95", "opacity-0");
					setTimeout(() => {
						modal.classList.remove("flex");
						modal.classList.add("hidden");
					}, 300);
				}
			}
		}
		// Función para cerrar un modal
		function cerrarModal(modalId: string) {
			toggleModalVisibility(modalId, false);
		}

		// Función para establecer los parámetros en los inputs del modal
		function setParamsFromSession() {
			const ownerDailyPaymentData = sessionStorage.getItem(
				"ownerDailyPaymentData",
			);
			if (ownerDailyPaymentData) {
				const { nombrePropietario, montoDiario, guardaCarreta } = JSON.parse(
					ownerDailyPaymentData,
				);

				const inputNombre = document.getElementById(
					"edit-full-name",
				) as HTMLInputElement;
				const inputMonto = document.getElementById(
					"edit-monto-diario",
				) as HTMLInputElement;
				const inputEstado = document.getElementById(
					"edit-estado",
				) as HTMLSelectElement;

				if (inputNombre) inputNombre.value = nombrePropietario;
				if (inputMonto) inputMonto.value = montoDiario;
				if (inputEstado) inputEstado.value = guardaCarreta;
			}
		}

		// Función para eliminar los parámetros del modal
		function clearSessionData() {
			sessionStorage.removeItem("ownerDailyPaymentData");
		}

		// Evento para actualizar los datos y cerrar el modal al hacer clic en el botón de Guardar
		async function execUpdateOwner(event: any) {
			event.preventDefault();
			const ownerDailyPaymentData = sessionStorage.getItem(
				"ownerDailyPaymentData",
			);
			if (!ownerDailyPaymentData)
				return console.error("No hay datos en sessionStorage");

			const { id, nombrePropietario, montoDiario, guardaCarreta } = JSON.parse(
				ownerDailyPaymentData,
			);

			const inputNombre = document.getElementById(
				"edit-full-name",
			) as HTMLInputElement;
			const inputMonto = document.getElementById(
				"edit-monto-diario",
			) as HTMLInputElement;
			const inputEstado = document.getElementById(
				"edit-estado",
			) as HTMLSelectElement;

			if (!inputNombre || !inputMonto || !inputEstado) {
				console.error("No se encontraron todos los elementos del formulario");
				return;
			}

			const nombreValue = inputNombre.value;
			const montoValue = inputMonto.value;
			const guardaCarretaValue = inputEstado.value;
			let guardaCarretaBoolean: boolean;

			if (guardaCarretaValue === "Sí guarda") {
				guardaCarretaBoolean = true;
			} else if (guardaCarretaValue === "Ya no guarda") {
				guardaCarretaBoolean = false;
			} else {
				console.error("Valor de estado no válido");
				return;
			}

			// Comprobar si los datos no han cambiado
			if (
				nombrePropietario === nombreValue &&
				montoDiario === montoValue &&
				guardaCarreta === guardaCarretaValue
			) {
				// console.log("⚠️ No se detectaron cambios en los datos para actualizar.");
				mostrarNotificacion(
					"⚠️ No se detectaron cambios en los datos para actualizar.",
					"other",
				);
				return; // No hacer nada si los datos son los mismos
			}

			try {
				const res = await fetch("/api/record/owner/updateOwner", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						id: Number(id),
						nombre_dueno: String(nombreValue),
						monto_diario: Number(montoValue),
						guarda_carreta: guardaCarretaBoolean,
					}),
				});

				if (res.ok) {
					//alert("✅ Datos actualizados correctamente.");
					mostrarNotificacion(
						"✅ Datos actualizados correctamente.",
						"success",
					);
					setTimeout(() => {
						window.location.reload();
					}, 1000);
				} else {
					const error = await res.json();
					//alert("❌ Error al actualizar: " + (error.error || "Error desconocido"));
					mostrarNotificacion(
						"❌ Error al actualizar: " + (error.error || "Error desconocido"),
						"error",
					);
				}
			} catch (error) {
				console.error("Error en la petición:", error);
				//alert("❌ Error en la comunicación con el servidor. Inténtelo de nuevo.");
				mostrarNotificacion(
					"❌ Error en la comunicación con el servidor. Inténtelo de nuevo.",
					"error",
				);
			}
		}

		const applyEstadoPagoStyles = () => {
			const editOwnerData: any =
				'[data-modal-toggle="edit-owner-daily-pay-modal"]';

			// Escuchar el evento de apertura del modal
			document.querySelectorAll(editOwnerData).forEach((btn) => {
				btn.addEventListener("click", () => {
					// Pequeño retraso para asegurar que los datos ya estén en sessionStorage
					setTimeout(() => {
						setParamsFromSession();
					}, 100);
				});
			});
		};

		applyEstadoPagoStyles();

		const confirmUpdateOwnerPayment = () => {
			// Botón que confirma la edición
			const updateOwnerForm = document.getElementById(
				"update-owner-daily-payment-form",
			);
			if (updateOwnerForm) {
				updateOwnerForm.addEventListener("submit", async (event) => {
					event.preventDefault();
					// Ejecutar la lógica de actualización aquí
					await execUpdateOwner(event);
					// Cerrar el modal y limpiar los datos
					cerrarModal("edit-owner-daily-pay-modal");
					clearSessionData();
				});
			}
		};

		confirmUpdateOwnerPayment();

		const execCloseModal = () => {
			// Botón que cierra el modal
			const closeModalButton = document.getElementById(
				"close-edit-owner-daily-pay-modal",
			);
			if (closeModalButton) {
				closeModalButton.addEventListener("click", () => {
					clearSessionData();
				});
			}
		};

		execCloseModal();

		// NUEVA funcionalidad para paginación dinámica
		// Variables globales para paginación
		let currentOwnerId = getCurrentOwnerId();

		function getCurrentOwnerId() {
			// Extraer ID de la URL actual
			const pathParts = window.location.pathname.split("/");
			return pathParts[pathParts.length - 1];
		}

		function showLoadingIndicator(show = true) {
			const indicator = document.getElementById("loading-indicator");
			if (indicator) {
				if (show) {
					indicator.classList.remove("hidden");
					indicator.classList.add("flex");
				} else {
					indicator.classList.add("hidden");
					indicator.classList.remove("flex");
				}
			}
		}

		// Función para actualizar la tabla dinámicamente
		async function updateTableContent(
			page: number,
			perPage: string | null = null,
		) {
			try {
				showLoadingIndicator(true);

				// Obtener perPage actual si no se especifica
				if (!perPage) {
					const url = new URL(window.location.href);
					perPage = url.searchParams.get("perPage") || "10";
				}

				// Hacer fetch a la API
				const response = await fetch(
					`/api/record/owner/paginated?id=${currentOwnerId}&page=${page}&perPage=${perPage}`,
					{
						headers: {
							Accept: "application/json",
							"X-Requested-With": "XMLHttpRequest",
						},
					},
				);

				if (!response.ok) {
					throw new Error("Error al obtener datos");
				}

				const result = await response.json();
				const { data, pagination } = result;

				// Actualizar contenido de la tabla
				updateTableRows(data);
				updatePaginationControls(pagination);
				updateRecordsSelector(perPage);

				// Actualizar URL sin recargar
				const url = new URL(window.location.href);
				url.searchParams.set("page", page.toString());
				url.searchParams.set("perPage", perPage.toString());
				window.history.pushState({}, "", url.toString());

				showLoadingIndicator(false);
			} catch (error) {
				console.error("Error al actualizar tabla:", error);
				showLoadingIndicator(false);
				// Mostrar error sin recargar página
				mostrarNotificacion(
					"Error al cargar los datos. Inténtalo nuevamente.",
					"error",
				);
			}
		}

		// Función para actualizar las filas de la tabla
		function updateTableRows(data: any[]) {
			const tbody = document.querySelector("#payments-table tbody");
			if (!tbody) return;

			// Limpiar filas existentes
			tbody.innerHTML = "";

			// Agregar nuevas filas
			data.forEach((pago: any) => {
				const formatoPago = {
					idDueno: pago.id ?? "-",
					nombreDueno: pago.nombre_dueno ?? "-",
					fechaPago: pago.fecha_pago ?? "-",
					montoTotal: pago.monto_total ?? 0,
					retiroCoche: pago.retiro_coche ? "Sí vino" : "No vino",
					estadoPago: pago.estado_pago ? "Sí Canceló" : "No Pagó",
					guardaCarreta: pago.guarda_carreta ? "Sí guarda" : "Ya no guarda",
				};

				const row = createTableRow(formatoPago);
				tbody.appendChild(row);
			});

			// Reinicializar eventos de botones de edición
			initializeEditButtons();
		}

		// Función para crear una fila de tabla
		function createTableRow(formatoPago: any) {
			const row = document.createElement("tr");
			row.className =
				"hover:bg-gray-100 dark:hover:bg-gray-700 transition duration-200";

			row.innerHTML = `
				<td class="p-4 text-xs sm:text-sm xl:text-base font-semibold text-gray-900 whitespace-nowrap dark:text-gray-200">
					${convertirFechaPeru(formatoPago.fechaPago)}
				</td>
				<td class="p-4 text-xs sm:text-sm xl:text-base font-semibold text-gray-900 whitespace-nowrap dark:text-gray-200">
					S/. ${formatoPago.montoTotal.toFixed(2)}
				</td>
				<td class="p-4 text-xs sm:text-sm xl:text-base text-nowrap font-medium">
					<span class="px-3 py-1 rounded-full text-sm sm:text-base ${
						formatoPago.retiroCoche === "No vino"
							? "text-neutral-800 bg-neutral-300 dark:text-[#cacaca] dark:bg-[#32373f]"
							: "text-blue-800 bg-blue-300 dark:text-[#5294ff] dark:bg-[#162542]"
					}">
						${formatoPago.retiroCoche}
					</span>
				</td>
				<td class="p-4 text-xs sm:text-sm xl:text-base text-nowrap font-medium">
					<span class="px-3 py-1 rounded-full text-sm sm:text-base ${
						formatoPago.estadoPago === "Sí Canceló"
							? "text-green-800 bg-green-300 dark:text-[#58ff36] dark:bg-[#2fff403d]"
							: "text-red-900 bg-red-200 dark:text-[#ff3636] dark:bg-[#ff2f2f3d]"
					}">
						${formatoPago.estadoPago}
					</span>
				</td>
				<td class="p-4 space-x-2 whitespace-nowrap">
					<button
						type="button"
						class="edit-payment-btn inline-flex items-center px-3 py-2 text-xs sm:text-sm xl:text-base font-medium text-center text-white rounded-lg bg-blue-600 hover:bg-blue-700 focus:ring-2 focus:ring-blue-400 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-700"
						data-payment='${JSON.stringify({
							id: formatoPago.idDueno,
							nombrePropietario: formatoPago.nombreDueno,
							montoDiario: formatoPago.montoTotal.toFixed(2),
							guardaCarreta: formatoPago.guardaCarreta,
						})}'>
						<svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
							<path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
							<path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
						</svg>
						Editar
					</button>
				</td>
			`;

			return row;
		}

		// Función para actualizar controles de paginación
		function updatePaginationControls(pagination: any) {
			const paginationContainer = document.getElementById(
				"pagination-controls",
			);
			if (!paginationContainer) return;

			const { currentPage, totalPages, totalRecords, perPage } = pagination;

			if (totalPages <= 1 || perPage === -1) {
				paginationContainer.innerHTML = "";
				return;
			}

			const inicioRango = perPage === -1 ? 1 : (currentPage - 1) * perPage + 1;
			const finRango =
				perPage === -1
					? totalRecords
					: Math.min(currentPage * perPage, totalRecords);

			// Calcular páginas visibles
			const paginasVisibles = calcularPaginasVisibles(currentPage, totalPages);

			paginationContainer.innerHTML = `
				<div class="px-5 py-4 bg-white dark:bg-slate-800 border-t border-gray-200 dark:border-gray-700">
					<div class="flex flex-col sm:flex-row justify-between items-center">
						<div class="mb-4 sm:mb-0 text-sm text-gray-700 dark:text-gray-300">
							Mostrando ${inicioRango} a ${finRango} de ${totalRecords} registros
						</div>
						<div class="flex space-x-2">
							<button data-page="${Math.max(1, currentPage - 1)}" 
									class="pagination-btn px-4 py-2 text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
										currentPage === 1
											? "bg-gray-100 text-gray-400 cursor-not-allowed dark:bg-gray-700 dark:text-gray-500"
											: "bg-white text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700"
									}" 
									${currentPage === 1 ? "disabled" : ""}>
								Anterior
							</button>
							
							${paginasVisibles
								.map(
									(pageNum: number) => `
								<button data-page="${pageNum}" 
										class="pagination-btn px-4 py-2 text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
											pageNum === currentPage
												? "bg-blue-600 text-white dark:bg-blue-500"
												: "bg-white text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700"
										}">
									${pageNum}
								</button>
							`,
								)
								.join("")}
							
							<button data-page="${Math.min(totalPages, currentPage + 1)}" 
									class="pagination-btn px-4 py-2 text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
										currentPage === totalPages
											? "bg-gray-100 text-gray-400 cursor-not-allowed dark:bg-gray-700 dark:text-gray-500"
											: "bg-white text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700"
									}" 
									${currentPage === totalPages ? "disabled" : ""}>
								Siguiente
							</button>
						</div>
					</div>
				</div>
			`;

			// Reinicializar eventos de paginación
			initializePaginationEvents();
		}

		// Función para actualizar el selector de registros por página
		function updateRecordsSelector(perPage: string) {
			const recordsSelect = document.getElementById(
				"records-per-page",
			) as HTMLSelectElement;
			if (recordsSelect) {
				recordsSelect.value = perPage;
			}
		}

		// Función helper para calcular páginas visibles
		function calcularPaginasVisibles(
			actual: number,
			total: number,
			maxVisibles: number = 5,
		): number[] {
			const paginas: number[] = [];
			const cantidadVisible = Math.min(maxVisibles, total);

			if (total <= maxVisibles) {
				for (let i = 1; i <= total; i++) {
					paginas.push(i);
				}
			} else if (actual <= 3) {
				for (let i = 1; i <= cantidadVisible; i++) {
					paginas.push(i);
				}
			} else if (actual >= total - 2) {
				for (let i = total - cantidadVisible + 1; i <= total; i++) {
					paginas.push(i);
				}
			} else {
				for (let i = actual - 2; i <= actual + 2; i++) {
					paginas.push(i);
				}
			}

			return paginas;
		}

		// Función helper para convertir fecha
		function convertirFechaPeru(fechaStr: string) {
			const fechaUTC = new Date(fechaStr + "T00:00:00Z");
			const fechaLocal = new Date(fechaUTC.getTime() + 5 * 60 * 60 * 1000);
			return fechaLocal.toLocaleDateString("es-PE", {
				weekday: "long",
				day: "2-digit",
				month: "long",
				year: "numeric",
			});
		}

		// Inicializar eventos de botones de edición
		function initializeEditButtons() {
			document.querySelectorAll(".edit-payment-btn").forEach((btn) => {
				btn.addEventListener("click", () => {
					const dataPayment = btn.getAttribute("data-payment");
					if (dataPayment) {
						const paymentData = JSON.parse(dataPayment);
						sessionStorage.setItem(
							"ownerDailyPaymentData",
							JSON.stringify(paymentData),
						);

						// Abrir modal (reutilizar lógica existente)
						toggleModalVisibility("edit-owner-daily-pay-modal", true);
						setTimeout(() => {
							setParamsFromSession();
						}, 100);
					}
				});
			});
		}

		// Inicializar eventos de paginación
		function initializePaginationEvents() {
			document.querySelectorAll(".pagination-btn").forEach((button) => {
				button.addEventListener("click", async (e) => {
					const target = e.target as HTMLButtonElement;

					if (target?.disabled) return;

					const pageNum = target.getAttribute("data-page");
					if (!pageNum) return;

					await updateTableContent(parseInt(pageNum));
				});
			});
		}

		// Exponer función globalmente para uso desde OwnerDailyPaymentList
		(window as any).updateTableContentExternal = updateTableContent;

		// Inicializar eventos al cargar la página
		initializeEditButtons();
		initializePaginationEvents();
	});
</script>
