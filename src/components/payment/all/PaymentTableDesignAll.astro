---
interface Props {
	fechaPago: string;
	listaPagos: {
		id: string;
		nombreDueno: string;
		fechaPago: string;
		retiroCoche: boolean;
		montoTotal: number;
		montoTarifaAgua: number;
		estadoPago: boolean;
		notaAdicional: string;
	}[];
}

const { fechaPago, listaPagos } = Astro.props;
---

<section class="flex flex-col gap-3">
	<h2 class="px-5 lg:px-0 text-lg font-medium text-black dark:text-white">
		Pagos del "{fechaPago}"
	</h2>
	<div class="overflow-x-auto rounded-2xl">
		<table
			class:list={[
				"min-w-full overflow-x-auto",
				"divide-y rounded-lg",
				"bg-white dark:bg-slate-800",
				"divide-gray-300 dark:divide-slate-700",
			]}
		>
			<thead class="bg-slate-200 dark:bg-slate-700 rounded-t-lg text-nowrap">
				<tr>
					<th
						scope="col"
						class="p-4 text-sm font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>Dueño</th
					>
					<th
						scope="col"
						class="p-4 text-sm font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>Pago realizado</th
					>
					<th
						scope="col"
						class="p-4 text-sm font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>Tarifa por agua</th
					>
					<th
						scope="col"
						class="p-4 text-sm font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>¿Retiro su carreta?</th
					>
					<th
						scope="col"
						class="p-4 text-sm font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>Estado del Pago</th
					>
					<th
						scope="col"
						class="p-4 text-sm font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>Nota adicional</th
					>
					<th
						scope="col"
						class="p-4 text-sm font-semibold text-left text-gray-700 uppercase dark:text-gray-300"
						>Acciones</th
					>
				</tr>
			</thead>
			<tbody class="divide-y divide-gray-200 dark:divide-gray-700">
				{
					listaPagos.map((pago) => {
						const formatoPago = {
							idDueno: pago.id ?? "-",
							nombreDueno: pago.nombreDueno ?? "-",
							montoTotal: pago.montoTotal ?? "-",
							montoTarifaAgua: pago.montoTarifaAgua ?? "-",
							retiroCoche: pago.retiroCoche ? "Sí vino" : "No vino",
							estadoPago: pago.estadoPago ? "Sí Canceló" : "No pagó",
							notaAdicional: pago.notaAdicional ?? "No se registró nota",
						};

						return (
							<tr class="hover:bg-gray-100 dark:hover:bg-gray-700 transition duration-200">
								<td class="p-4 text-base font-medium text-gray-900 dark:text-gray-200">
									{formatoPago.nombreDueno}
								</td>
								<td class="p-4 text-nowrap text-base font-semibold text-gray-900 dark:text-gray-200">
									S/. {parseFloat(formatoPago.montoTotal.toString()).toFixed(2)}
								</td>
								<td
									id="table-tarifa-agua-value"
									class="p-4 text-nowrap text-base font-semibold text-gray-900 dark:text-gray-200"
								>
									S/.{" "}
									{parseFloat(formatoPago.montoTarifaAgua.toString()).toFixed(
										2,
									)}
								</td>
								<td class="p-4 text-sm text-nowrap font-medium">
									<span
										class:list={[
											"px-3 py-1 rounded-full text-sm sm:text-base",
											formatoPago.retiroCoche === "No vino"
												? "text-neutral-800 bg-neutral-300 dark:text-[#cacaca] dark:bg-[#32373f]"
												: "text-blue-800 bg-blue-300 dark:text-[#5294ff] dark:bg-[#162542]",
										]}
									>
										{formatoPago.retiroCoche}
									</span>
								</td>
								<td class="p-4 text-sm text-nowrap font-medium">
									<span
										class:list={[
											"px-3 py-1 rounded-full text-sm sm:text-base",
											formatoPago.estadoPago === "Sí Canceló"
												? "text-green-800 bg-green-300 dark:text-[#58ff36] dark:bg-[#2fff403d]"
												: "text-red-900 bg-red-200 dark:text-[#ff3636] dark:bg-[#ff2f2f3d]",
										]}
									>
										{formatoPago.estadoPago}
									</span>
								</td>
								<td
									id="table-nota-adicional-value"
									class="p-4 text-base text-nowrap font-medium text-gray-900 dark:text-gray-200"
									title={formatoPago.notaAdicional}
								>
									{formatoPago.notaAdicional.length > 19
										? formatoPago.notaAdicional.substring(0, 19) + "..."
										: formatoPago.notaAdicional}
								</td>
								<td class="p-4 space-x-2">
									<button
										type="button"
										id="open-edit-payment-day-ago-modal"
										data-modal-toggle="edit-payment-day-ago-modal-data"
										class="inline-flex text-nowrap items-center px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-blue-600 hover:bg-blue-700 focus:ring-2 focus:ring-blue-400 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-700"
										onclick={`sessionStorage.setItem('editPaymentDayAgoData', JSON.stringify({
													            idDueno: '${formatoPago.idDueno}',
													            nombrePropietario: '${formatoPago.nombreDueno}',
													            montoTotal: '${formatoPago.montoTotal.toFixed(2)}',
																			montoTarifaAgua: '${formatoPago.montoTarifaAgua.toFixed(2)}',
													            retiroCoche: '${formatoPago.retiroCoche}',
																			estadoPago: '${formatoPago.estadoPago}',
																			notaAdicional: '${formatoPago.notaAdicional}'
													    }));`}
									>
										<svg
											class="w-4 h-4 mr-2"
											fill="currentColor"
											viewBox="0 0 20 20"
											xmlns="http://www.w3.org/2000/svg"
										>
											<path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
											<path
												fill-rule="evenodd"
												d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"
												clip-rule="evenodd"
											/>
										</svg>
										Confirmar Pago
									</button>
								</td>
							</tr>
						);
					})
				}
			</tbody>
		</table>
	</div>
	<!-- Edit User Modal -->
	<div
		class="fixed inset-0 z-50 items-center justify-center bg-black bg-opacity-50 transition-opacity duration-300 ease-in-out hidden"
		id="edit-payment-day-ago-modal-data"
	>
		<div
			class="relative w-full max-w-2xl px-4 transform transition-all duration-300 ease-in-out scale-95 opacity-0"
		>
			<!-- Modal content -->
			<div class="relative bg-white rounded-lg shadow-lg dark:bg-gray-800">
				<!-- Modal header -->
				<div
					class="flex items-start justify-between p-5 border-b border-gray-200 rounded-t dark:border-gray-700"
				>
					<h3 class="text-xl font-semibold text-gray-900 dark:text-white">
						Confirmación de pago
					</h3>
					<button
						type="button"
						id="close-edit-payment-day-ago-modal-1"
						class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-700 dark:hover:text-white"
						data-modal-toggle="edit-payment-day-ago-modal-data"
					>
						<svg
							class="w-5 h-5"
							fill="currentColor"
							viewBox="0 0 20 20"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								fill-rule="evenodd"
								d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
								clip-rule="evenodd"></path>
						</svg>
					</button>
				</div>

				<!-- Modal body -->
				<div>
					<form id="update-payment-day-ago-form" class="p-6">
						<div class="mb-4 grid grid-cols-1 sm:grid-cols-2 gap-6">
							<div
								class="inline-block min-w-full align-middle col-span-1 sm:col-span-2"
							>
								<div
									class="overflow-hidden p-4 flex flex-col gap-2 items-center bg-blue-50 dark:bg-gray-700 rounded-lg"
								>
									<p
										class="text-nowrap text-lg font-medium text-blue-900 dark:text-white mb-1"
									>
										Pago de
										<span id="edit-full-name" class="font-semibold"></span>
									</p>
									<p
										class="text-nowrap text-4xl lg:text-5xl 2xl:text-6xl text-gray-600 dark:text-gray-300"
									>
										S/. <span id="edit-monto-total" class="overflow-x-hidden"
										></span>
									</p>
								</div>
							</div>

							<div class="col-span-2 sm:col-span-1">
								<label
									for="edit-retiro-coche"
									class="block mb-2 text-base font-medium text-blue-900 dark:text-white"
									>¿Retiro su carreta?</label
								>
								<select
									name="retiro-coche"
									id="edit-retiro-coche"
									class="shadow-sm bg-gray-50 rounded-lg border border-gray-300 text-gray-900 sm:text-sm focus:ring-gray-500 focus:border-gray-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-gray-500 dark:focus:border-gray-500 appearance-none"
									required
								>
									<option value="" disabled selected>
										Seleccione el estado</option
									>
									<option value="Sí vino">Sí vino</option>
									<option value="No vino">No vino</option>
								</select>
							</div>
							<div class="col-span-2 sm:col-span-1">
								<label
									for="edit-estado-pago"
									class="block mb-2 text-base font-medium text-blue-900 dark:text-white"
									>Estado del pago</label
								>
								<select
									name="estado-pago"
									id="edit-estado-pago"
									class="shadow-sm bg-gray-50 rounded-lg border border-gray-300 text-gray-900 sm:text-sm focus:ring-gray-500 focus:border-gray-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-gray-500 dark:focus:border-gray-500 appearance-none"
									required
								>
									<option value="" disabled selected>
										Seleccione el estado</option
									>
									<option value="No pagó">No pagó</option>
									<option value="Sí Canceló">Sí Canceló</option>
								</select>
							</div>
							<div class="col-span-2">
								<label
									for="edit-nota-adicional"
									class="block mb-2 text-base font-medium text-blue-900 dark:text-white"
									>Nota adicional</label
								>
								<textarea
									name="nota-adicional"
									id="edit-nota-adicional"
									rows="3"
									cols="6"
									maxlength="100"
									placeholder="Ejemplo: Pagó 8 soles de 2 días ó Pagó 7 soles por la otra carreta"
									class="shadow-sm bg-gray-50 rounded-lg border border-gray-300 text-gray-900 text-base sm:text-lg focus:ring-gray-500 focus:border-gray-500 block w-full h-24 resize-none p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-gray-500 dark:focus:border-gray-500 appearance-none"
								></textarea>
							</div>
						</div>
						<!-- Modal footer -->
						<div
							class="flex items-center justify-end px-6 pt-4 border-t border-gray-200 rounded-b dark:border-gray-700"
						>
							<button
								id="close-edit-payment-day-ago-modal-2"
								class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800"
								type="submit"
								data-modal-toggle="edit-payment-day-ago-modal-data"
							>
								Guardar
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
</section>

<script>
	// Espera a que cargue toda la pagina para ejecutarse
	document.addEventListener("DOMContentLoaded", () => {
		// Función para mostrar una notificación temporal
		function mostrarNotificacion(mensaje: any, tipo: any) {
			// Crear un elemento de notificación
			const notificacion = document.createElement("div");

			// Establecer clases según el tipo
			const baseClasses =
				"fixed bottom-4 right-4 py-2 px-4 rounded-lg shadow-lg z-50 transition-all duration-300 transform opacity-0 scale-95";
			const typeClasses =
				tipo === "success"
					? "bg-green-600 text-white"
					: tipo === "error"
						? "bg-red-500 text-white"
						: "bg-orange-700 text-white";

			const setTimeoutValue = tipo === "success" ? 800 : 5000;

			notificacion.className = `${baseClasses} ${typeClasses}`;
			notificacion.textContent = mensaje;

			// Añadir al DOM
			document.body.appendChild(notificacion);

			// Animación para aparecer
			setTimeout(() => {
				notificacion.classList.add("opacity-100", "scale-100");
				notificacion.classList.remove("opacity-0", "scale-95");
			}, 10);

			// Eliminar después del tiempo configurado
			setTimeout(() => {
				notificacion.classList.add("translate-y-10", "opacity-0");
				notificacion.classList.remove("opacity-100", "scale-100");
				setTimeout(() => {
					document.body.removeChild(notificacion);
				}, 200);
			}, setTimeoutValue);
		}

		// Función para alternar el estado del modal
		function toggleModalVisibility(modalId: string, show: boolean) {
			const modal = document.getElementById(modalId);
			if (modal) {
				const modalContent = modal.querySelector(".transform");
				if (show) {
					modal.classList.remove("hidden");
					modal.classList.add("flex");
					setTimeout(() => {
						modal.classList.add("opacity-100");
						modalContent?.classList.add("scale-100", "opacity-100");
						modalContent?.classList.remove("scale-95", "opacity-0");
					}, 10);
				} else {
					modal.classList.remove("opacity-100");
					modalContent?.classList.remove("scale-100", "opacity-100");
					modalContent?.classList.add("scale-95", "opacity-0");
					setTimeout(() => {
						modal.classList.remove("flex");
						modal.classList.add("hidden");
					}, 300);
				}
			}
		}

		// Función para abrir un modal
		function abrirModal(modalId: string) {
			toggleModalVisibility(modalId, true);
		}

		// Función para cerrar un modal
		function cerrarModal(modalId: string) {
			toggleModalVisibility(modalId, false);
		}

		// Función para inicializar los eventos de los botones de toggle
		function initializeModalToggles(selectorValue: any) {
			const modalToggles = document.querySelectorAll(selectorValue);
			modalToggles.forEach((toggle) => {
				toggle.addEventListener("click", () => {
					const modalId = toggle.getAttribute("data-modal-toggle");
					if (modalId) {
						const modal = document.getElementById(modalId);
						if (modal && modal.classList.contains("hidden")) {
							abrirModal(modalId);
						} else {
							cerrarModal(modalId);
						}
					}
				});
			});
		}

		// Función para establecer los parámetros en los inputs del modal
		function setParamsFromSession() {
			const editPaymentDayAgoData = sessionStorage.getItem(
				"editPaymentDayAgoData",
			);
			if (editPaymentDayAgoData) {
				try {
					const {
						nombrePropietario,
						montoTotal,
						retiroCoche,
						estadoPago,
						notaAdicional,
					} = JSON.parse(editPaymentDayAgoData);

					const inputNombre = document.getElementById(
						"edit-full-name",
					) as HTMLInputElement;
					const inputMonto = document.getElementById(
						"edit-monto-total",
					) as HTMLInputElement;
					const inputRetiraCoche = document.getElementById(
						"edit-retiro-coche",
					) as HTMLSelectElement;
					const inputEstadoPago = document.getElementById(
						"edit-estado-pago",
					) as HTMLSelectElement;

					const inputNotaAdicional: any = document.getElementById(
						"edit-nota-adicional",
					) as HTMLSelectElement;

					if (inputNombre) inputNombre.textContent = nombrePropietario;
					if (inputMonto) inputMonto.textContent = montoTotal;
					if (inputRetiraCoche) inputRetiraCoche.value = retiroCoche;
					if (inputEstadoPago) inputEstadoPago.value = estadoPago;
					if (notaAdicional === "No se registró nota") {
						inputNotaAdicional.value = null;
					} else {
						inputNotaAdicional.value = notaAdicional;
					}

					// console.log("Datos cargados en el modal:", {
					// 	nombrePropietario,
					// 	montoTotal,
					// 	retiroCoche,
					// 	estadoPago,
					// 	notaAdicional
					// });
				} catch (error) {
					console.error(
						"Error al procesar los datos de sessionStorage:",
						error,
					);
				}
			} else {
				console.log("No hay datos en sessionStorage para cargar");
			}
		}

		// Función para eliminar los parámetros del modal
		function clearSessionData() {
			sessionStorage.removeItem("editPaymentDayAgoData");
		}
		// Valida si todos los elementos del formulario existen
		function validateFormElements() {
			const inputNombre = document.getElementById(
				"edit-full-name",
			) as HTMLInputElement;

			const inputMonto = document.getElementById(
				"edit-monto-total",
			) as HTMLInputElement;

			const inputRetiraCoche = document.getElementById(
				"edit-retiro-coche",
			) as HTMLSelectElement;

			const inputEstadoPago = document.getElementById(
				"edit-estado-pago",
			) as HTMLSelectElement;

			const inputNotaAdicional = document.getElementById(
				"edit-nota-adicional",
			) as HTMLTextAreaElement;

			if (
				!inputNombre ||
				!inputMonto ||
				!inputRetiraCoche ||
				!inputEstadoPago ||
				!inputNotaAdicional
			) {
				mostrarNotificacion(
					"⚠️ No se encontraron todos los elementos del formulario.",
					"other",
				);
				return null;
			}

			return {
				inputNombre,
				inputMonto,
				inputRetiraCoche,
				inputEstadoPago,
				inputNotaAdicional,
			};
		}

		// Convierte el valor de retiro de coche a booleano
		function parseRetiroCocheValue(retiroCocheValue: string): boolean | null {
			if (retiroCocheValue === "Sí vino") {
				return true;
			} else if (retiroCocheValue === "No vino") {
				return false;
			} else {
				mostrarNotificacion("⚠️ Valor de estado no válido.", "other");
				return null;
			}
		}

		// Convierte el valor de estado de pago a booleano
		function parseEstadoPagoValue(estadoPagoValue: string): boolean | null {
			if (estadoPagoValue === "Sí Canceló") {
				return true;
			} else if (estadoPagoValue === "No pagó") {
				return false;
			} else {
				mostrarNotificacion("⚠️ Valor de estado no válido.", "other");
				return null;
			}
		}

		// Verifica si los datos han cambiado
		function checkIfDataChanged(originalData: any, newData: any): boolean {
			if (
				originalData.nombrePropietario === newData.nombreValue &&
				originalData.montoTotal === newData.montoValue &&
				originalData.retiroCoche === newData.retiroCocheValue &&
				originalData.estadoPago === newData.estadoPagoValue &&
				originalData.notaAdicional === newData.notaAdicionalText
			) {
				mostrarNotificacion("⚠️ No hay cambios en los datos.", "other");
				return false;
			}
			return true;
		}

		// Envía la solicitud para actualizar el pago
		async function sendUpdateRequest(paymentData: any): Promise<boolean> {
			try {
				const res = await fetch("/api/record/payment/updatePayment", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						id: Number(paymentData.id),
						nombre_dueno: String(paymentData.nombreValue),
						monto_total: Number(paymentData.montoValue),
						retiro_coche: paymentData.retiroCocheBoolean,
						estado_pago: paymentData.estadoPagoBoolean,
						nota_adicional: paymentData.notaAdicionalText,
					}),
				});

				if (res.ok) {
					mostrarNotificacion(
						"✅ Datos actualizados correctamente.",
						"success",
					);
					setTimeout(() => {
						window.location.reload();
					}, 1000);
					return true;
				} else {
					const error = await res.json();
					mostrarNotificacion(
						"❌ Error al actualizar: " + (error.error || "Error desconocido"),
						"error",
					);
					return false;
				}
			} catch (error) {
				mostrarNotificacion(
					"❌ Error en la comunicación con el servidor. Inténtelo de nuevo.",
					"error",
				);
				return false;
			}
		}

		// Función principal que gestiona la actualización del pago
		async function execUpdatePaymentAgoDay(event: any) {
			event.preventDefault();

			// Obtener los datos de sessionStorage
			const editPaymentDayAgoData = sessionStorage.getItem(
				"editPaymentDayAgoData",
			);
			if (!editPaymentDayAgoData) {
				mostrarNotificacion("⚠️ No hay datos en el registro.", "other");
				return;
			}

			const {
				idDueno,
				nombrePropietario,
				montoTotal,
				retiroCoche,
				estadoPago,
				notaAdicional,
			} = JSON.parse(editPaymentDayAgoData);

			// Validar elementos del formulario
			const formElements = validateFormElements();
			if (!formElements) return;

			const {
				inputNombre,
				inputMonto,
				inputRetiraCoche,
				inputEstadoPago,
				inputNotaAdicional,
			} = formElements;

			// Obtener valores del formulario
			const nombreValue = inputNombre.textContent;
			const montoValue = inputMonto.textContent;
			const retiroCocheValue = inputRetiraCoche.value;
			const estadoPagoValue = inputEstadoPago.value;
			const notaAdicionalText =
				inputNotaAdicional.value === "" ? null : inputNotaAdicional.value;

			// Validar y convertir los valores
			const retiroCocheBoolean = parseRetiroCocheValue(retiroCocheValue);
			if (retiroCocheBoolean === null) return;

			const estadoPagoBoolean = parseEstadoPagoValue(estadoPagoValue);
			if (estadoPagoBoolean === null) return;

			// Verificar si los datos han cambiado
			const originalData = {
				nombrePropietario,
				montoTotal,
				retiroCoche,
				estadoPago,
				notaAdicional,
			};
			const newData = {
				nombreValue,
				montoValue,
				retiroCocheValue,
				estadoPagoValue,
				notaAdicionalText,
			};

			if (!checkIfDataChanged(originalData, newData)) return;

			// Enviar solicitud de actualización
			await sendUpdateRequest({
				id: idDueno,
				nombreValue,
				montoValue,
				retiroCocheBoolean,
				estadoPagoBoolean,
				notaAdicionalText,
			});
		}

		const sumarTarifaAgua = () => {
			const inputRetiroCoche = document.getElementById(
				"edit-retiro-coche",
			) as HTMLSelectElement;

			const editMontoDiarioElement = document.getElementById(
				"edit-monto-total",
			) as HTMLInputElement;

			// Agregue el oyente de eventos de cambio para detectar cuando el usuario cambia la selección
			if (inputRetiroCoche) {
				inputRetiroCoche.addEventListener("change", () => {
					// Obtenga los datos de SessionStorage para acceder a los valores originales
					const editPaymentDayAgoData = sessionStorage.getItem(
						"editPaymentDayAgoData",
					);
					if (editPaymentDayAgoData) {
						const { montoTarifaAgua } = JSON.parse(editPaymentDayAgoData);

						// Analizar valores originales con respaldo
						const tarifaAgua = parseFloat(montoTarifaAgua) || 0;

						// Actualizar el valor de MONTO basado en la selección
						if (editMontoDiarioElement) {
							if (inputRetiroCoche.value === "Sí vino") {
								// Si vinieron, agregue la tarifa de agua al total
								editMontoDiarioElement.textContent = (
									Number(editMontoDiarioElement.textContent) + tarifaAgua
								).toFixed(2);
							} else if (inputRetiroCoche.value === "No vino") {
								// Si no vinieron, reste la tarifa de agua del total
								editMontoDiarioElement.textContent = (
									Number(editMontoDiarioElement.textContent) - tarifaAgua
								).toFixed(2);
							}
						}
					}
				});
			}
		};

		sumarTarifaAgua();

		const activeAllModals = () => {
			const allModalToggle: any = "[data-modal-toggle]";

			// Inicializar eventos
			initializeModalToggles(allModalToggle);
		};

		activeAllModals();

		const activeOnlyPaymentModal = () => {
			const editPaymentDayAgoData: any =
				'[data-modal-toggle="edit-payment-day-ago-modal-data"]';

			// Escuchar el evento de apertura del modal
			document.querySelectorAll(editPaymentDayAgoData).forEach((btn) => {
				btn.addEventListener("click", () => {
					// Pequeño retraso para asegurar que los datos ya estén en sessionStorage
					setTimeout(() => {
						setParamsFromSession();
						applyEstadoPagoStyles();
					}, 100);
				});
			});
		};

		activeOnlyPaymentModal();

		// Function to apply estado pago styles based on current selection
		const applyEstadoPagoStyles = () => {
			const inputEstadoPago = document.getElementById(
				"edit-estado-pago",
			) as HTMLSelectElement;

			const inputRetiroCoche = document.getElementById(
				"edit-retiro-coche",
			) as HTMLSelectElement;

			if (!inputEstadoPago || !inputRetiroCoche) return;

			// Apply styles based on payment status
			if (inputEstadoPago.value === "Sí Canceló") {
				inputRetiroCoche.disabled = true;
				inputRetiroCoche.classList.add("cursor-not-allowed", "opacity-60");
			} else if (inputEstadoPago.value === "No pagó") {
				inputRetiroCoche.disabled = false;
				inputRetiroCoche.classList.remove("cursor-not-allowed", "opacity-60");
			}

			// Add change event listener to reapply styles when payment status changes
			inputEstadoPago.addEventListener("change", applyEstadoPagoStyles);
		};

		const confirmUpdatePaymentAgoDay = () => {
			// Botón que confirma la edición
			const updatePaymentDayAgoForm = document.getElementById(
				"update-payment-day-ago-form",
			);
			if (updatePaymentDayAgoForm) {
				updatePaymentDayAgoForm.addEventListener("submit", async (event) => {
					event.preventDefault();
					// Ejecutar la lógica de actualización aquí
					await execUpdatePaymentAgoDay(event);
					// Cerrar el modal y limpiar los datos
					clearSessionData();
					cerrarModal("edit-payment-day-ago-modal-data");
				});
			}
		};

		confirmUpdatePaymentAgoDay();

		const execCloseModal = () => {
			// Botón que cierra el modal
			const closeModalButton1 = document.getElementById(
				"close-edit-payment-day-ago-modal-1",
			);
			if (closeModalButton1) {
				closeModalButton1.addEventListener("click", () => {
					clearSessionData();
					cerrarModal("edit-payment-day-ago-modal-data");
				});
			}
		};

		execCloseModal();
	});
</script>
