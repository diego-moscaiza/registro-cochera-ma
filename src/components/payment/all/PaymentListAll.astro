---
import { getAllPayments } from "../../../pages/api/record/payment/getPayment";
import PaymentTableDesignAll from "./../all/PaymentTableDesignAll.astro";

export interface PaymentEntry {
	id: string;
	dueno_id: string;
	nombre_dueno: string;
	fecha_pago: string;
	retiro_coche: boolean;
	monto_total: number;
	estado_pago: boolean;
}
const response = await getAllPayments();
const listaPagos = Array.isArray(response) ? response : await response.json();
const opciones: Intl.DateTimeFormatOptions = {
	weekday: "long",
	day: "2-digit",
	month: "long",
	year: "numeric",
};

function convertirFechaPeru(fechaStr: string) {
	const fechaUTC = new Date(fechaStr + "T00:00:00Z"); // Se fuerza a UTC
	const fechaLocal = new Date(fechaUTC.getTime() + 5 * 60 * 60 * 1000); // Ajuste a UTC-5
	return fechaLocal.toLocaleDateString("es-PE", opciones);
}

// Función para obtener la fecha actual en formato Perú (YYYY-MM-DD)
function obtenerFechaActualPeru() {
	// Crear fecha en UTC
	const fechaUTC = new Date();

	// Ajustar a UTC-5 (hora de Perú)
	const fechaPeru = new Date(fechaUTC.getTime() - 5 * 60 * 60 * 1000);

	// Obtener componentes de la fecha
	const año = fechaPeru.getUTCFullYear();
	const mes = String(fechaPeru.getUTCMonth() + 1).padStart(2, "0");
	const dia = String(fechaPeru.getUTCDate()).padStart(2, "0");

	// Retornar en formato YYYY-MM-DD
	return `${año}-${mes}-${dia}`;
}

// Obtener la fecha actual en Perú en formato YYYY-MM-DD
const fechaHoyPeru = obtenerFechaActualPeru();

// Filtrar pagos que no sean de hoy
const pagosFiltrados = listaPagos.filter((pago: any) => {
	// El formato de fecha_pago es YYYY-MM-DD
	return pago.fecha_pago !== fechaHoyPeru;
});

// Crear un Set para almacenar las fechas únicas de los pagos filtrados
const fechasPagos = new Set(
	pagosFiltrados.map((pago: any) => convertirFechaPeru(pago.fecha_pago)),
);

// Agrupar pagos por fecha utilizando Map
const pagosPorFecha = new Map<string, PaymentEntry[]>();
pagosFiltrados.forEach((pago: any) => {
	const fechaPago = convertirFechaPeru(pago.fecha_pago);
	if (!pagosPorFecha.has(fechaPago)) {
		pagosPorFecha.set(fechaPago, []);
	}
	pagosPorFecha.get(fechaPago)?.push(pago);
});

// Ordenar los pagos dentro de cada fecha
pagosPorFecha.forEach((pagos) => {
	pagos.sort((a, b) => Number(a.dueno_id) - Number(b.dueno_id));
});
---

<div class="space-y-8">
	{
		fechasPagos.size > 0 ? (
			Array.from(pagosPorFecha.entries()).map(
				([dbFechaPago, dbDetallesPagos]: [string, PaymentEntry[]]) => (
					<PaymentTableDesignAll
						fechaPago={dbFechaPago}
						listaPagos={dbDetallesPagos.map((detallePago) => ({
							id: detallePago.id,
							nombreDueno: detallePago.nombre_dueno,
							fechaPago: detallePago.fecha_pago,
							retiroCoche: detallePago.retiro_coche,
							montoTotal: detallePago.monto_total,
							estadoPago: detallePago.estado_pago,
						}))}
					/>
				),
			)
		) : (
			<div class="px-6 py-4 text-2xl text-center bg-white dark:bg-slate-700 rounded-lg border border-slate-400 dark:border-slate-600">
				No hay registros por mostrar.
			</div>
		)
	}
</div>
