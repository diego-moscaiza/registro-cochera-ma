---
import { getPagos } from "../../../pages/api/record/listPayments";
import PaymentDesignAll from "./../all/PaymentDesignAll.astro";

export interface PaymentEntry {
	id: string;
	nombre_dueno: string;
	fecha_pago: string;
	retiro_coche: boolean;
	monto_total: number;
	estado_pago: boolean;
}

const listaPagos = await getPagos();

const opciones: Intl.DateTimeFormatOptions = {
	day: "numeric",
	month: "long",
	year: "numeric",
};

function convertirFechaPeru(fechaStr: any) {
	const fechaUTC = new Date(fechaStr + "T00:00:00Z"); // Se fuerza a UTC
	const fechaLocal = new Date(fechaUTC.getTime() + 5 * 60 * 60 * 1000); // Ajuste a UTC-5
	return fechaLocal.toLocaleDateString("es-PE", opciones);
}

// Agrupar pagos por fecha
const pagosPorFecha: Record<string, PaymentEntry[]> = listaPagos.reduce(
	(acc: Record<string, PaymentEntry[]>, pago: PaymentEntry) => {
		const fechaPago = convertirFechaPeru(pago.fecha_pago);
		if (!acc[fechaPago]) acc[fechaPago] = [];
		acc[fechaPago].push(pago);
		return acc;
	},
	{},
);

Object.keys(pagosPorFecha).forEach((fecha) => {
	pagosPorFecha[fecha]?.sort((a, b) => Number(a.id) - Number(b.id));
});
---

<div class="space-y-8">
	{
		Object.entries(pagosPorFecha).map(
			([dbFechaPago, dbDetallesPagos]: [string, PaymentEntry[]]) => (
				<PaymentDesignAll
					fechaPago={dbFechaPago}
					listaPagos={dbDetallesPagos.map((detallePago) => ({
						id: detallePago.id,
						nombreDueno: detallePago.nombre_dueno,
						fechaPago: detallePago.fecha_pago,
						retiroCoche: detallePago.retiro_coche,
						montoTotal: detallePago.monto_total,
						estadoPago: detallePago.estado_pago,
					}))}
				/>
			),
		)
	}
</div>
